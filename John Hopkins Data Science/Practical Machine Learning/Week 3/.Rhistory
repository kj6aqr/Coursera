lm(x~y)
lm(x~y-1)
lm(y~x-1)
data(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt -1)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m<-mean(x)
s<-sd(x)
y<-(x-m)/s
y
mean(y)
sd(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
lm(y~x)
nx<-(x-mean(x))/sd(x)
ny<-(y-mean(y))/sd(y)
plot(x,y)
lm(ny~nx)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x-mean(x)^2)
sum((x-mean(x)+0.001)^2)
sum((x-mean(x)+0.0)^2)
sum((x-mean(x)+0.00001)^2)
sum((x-mean(x)-0.00001)^2)
sum((x-mean(x)-0.01)^2)
mean(x)
sum((x-mean(x)+0.01)^2)
library(UsingR)
data(diamond)
library(ggplot2)
g=ggplot(diamond,aes(x=caret,y=price),)
g=g+xlab("Mass")
g=g+ylab("Price")
g=g+geom_point(size=6,color="black",alpha=0.2)
g=g+geom_point(size=5,color="blue",alpha=0.2)
g=g+geom_smooth(method="lm",colour="black")
g
g=ggplot(diamond,aes(x=carat,y=price),)
g=g+xlab("Mass")
g=g+ylab("Price")
g=g+geom_point(size=6,color="black",alpha=0.2)
g=g+geom_point(size=5,color="blue",alpha=0.2)
g=g+geom_smooth(method="lm",colour="black")
g
fit<-lm(price ~ carat,data=diamond)
coef(fit)
summary(fit)
fit2<-lm(price ~ I(carat-mean(carat)),data=diamond)
coef(fit2)
fit3<-lm(price ~ I((carat-mean(carat)*10)),data=diamond)
coef(fit3)
fit3<-lm(price ~ I(carat*10),data=diamond)
coef(fit3)
newx<-c(0.16,0.27,0.34)
coef(fit)[1]+coef(fit)[2]*newx
predict(fit,newdata=data.frame(carat=newx))
predict(fit)
plot(diamond$carat,diamond$price,xlab="mass",ylab="price",bg="lightblue",col="black",cex=1.1,pch=21,frame=FALSE)
abline(fit,lwd=2)
for(i in 1:n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col="red",lwd=2)
fit<-lm(y~x)
y<-diamond$price
x<-diamond$carat
n<-length(y)
e<-resid(fit)
yhat<-predict(fit)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col="red",lwd=2)
for(i in 1:n)
lines(c(x[i],x[i]),c(y[i],yhat[i]),col="red",lwd=2)
plot(x,e,xlab="mass",ylab="resid",bg="lightblue",col="black",cex=2,pch=21,frame=FALSE)
abline(h=0,lwd=2)
for(i in 1:n)
lines(c(x[i],x[i]),c(e[i],0),col="red",lwd=2)
x=runif(100,-3,3);y=x+sin(x)+rnorm(100,sd=0.2)
g=ggplot(data.frame(x=x,y=y),aes(x=x,y=y))
g=g+geom_smooth
g=g+geom_smooth(method="lm",color="black")
g=g+geom_point(size=7,color="black",alpha=0.4)
g=g+geom_point(size=5,color="red",alpha=0.4)
g
g=ggplot(data.frame(x=x,resid(lm(y~x))),aes(x=x,y=y))
g=g+geom_smooth(method="lm",color="black")
g=g+geom_smooth(method="lm",color="black")
g=g+geom_point(size=7,color="black",alpha=0.4)
g=g+geom_point(size=5,color="red",alpha=0.4)
g
g=ggplot(data.frame(x=x,y=resid(lm(y~x))),aes(x=x,y=y))
g=g+geom_hline(yintercept=0,size=2)
g=g+geom_point(size=7,color="black",alpha=0.4)
g=g+geom_point(size=5,color="red",alpha=0.4)
g
e=c(resid(lm(price~1,data=diamond)),resid(lm(price~carat,data=diamond)))
fit=factor(c(rep("Itc",nrow(diamond)),rep("Itc, slope",nrow(diamond)))))
fit=factor(c(rep("Itc",nrow(diamond)),rep("Itc, slope",nrow(diamond))))
g=ggplot(data.frame(e=e,fit=fit),aes(y=e,x=fit,fill=fit))
g=g+deom_dotplot(binaxis="y",size=2,stackdir="center")
g=g+geom_dotplot(binaxis="y",size=2,stackdir="center")
g
data(mtcars)
lm(mtcars$mpg,mtcars$weight)
fit<-lm(mtcars$mpg~mtcars$weight)
lm(mtcars$mpg~mtcars$wgt)
lm(mtcars$mpg~mtcars$wt)
?mtcars
fit<-lm(mtcars$mpg~mtcars$weight)x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
fit<-lm(mtcars$mpg~mtcars$wt)
summary(fit)
sumCoef<-summary(fit)$coefficients
sumCoef[1,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[1,2]
sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
p1=data.frame(predict(fit,newdata=newx,interval=("confidence")))
newx=data.frame(x=seq(min(x),max(x),length=100))
p1=data.frame(predict(fit,newdata=newx,interval=("confidence")))
p2=data.frame(predict(fit,newdata=newx,interval=("prediction")))
p1$interval="confidence"
p2$interval="prediction"
p1$x=newx$x
x
y
p2=data.frame(predict(fit,newdata=3000,interval=("prediction")))
p2=data.frame(predict(fit,newdata=data.frame(3000),interval=("prediction")))
lm(mtcars$mpg~mtcars$wt)
summary(lm(mtcars$mpg~mtcars$wt))
summary(lm(mtcars$mpg~mtcars$wt))$summary
summary(lm(mtcars$mpg~mtcars$wt))$coefficients
summary(lm(mtcars$mpg~I(mtcars$wt-ave(mtcars$wt)))$coefficients
/
)
summary(lm(mtcars$mpg~I(mtcars$wt-ave(mtcars$wt))))$coefficients
sumCoef
fit<-lm(mtcars$mpg~I(mtcars$wt-ave(mtcars$wt)))
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
n<-length(mtcars$mpg)
x<-mtcars$wt
y<-mtcars$mpg
plot(x,y)
plot(y,x)
plot(y,x)
abline(fit,lwd=2)
x<-mtcars$wt-ave(mtcars$wt)
plot(y,x)
abline(fit,lwd=2)
fit<-lm(y~x)
> sumCoef<-summary(fit)$coefficients
> sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
sumCoef<-summary(fit)$coefficientssumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
sumCoef<-summary(fit)$coefficients
sumCoef[2,1]+c(-1,1)*qt(0.975,df=fit$df)*sumCoef[2,2]
abline(fit)
abline(fit,lwd=2)
plot(x,y,frame=FALSE,xlab="Weight",ylab="MPG",pch=21,col="black",bg="lightblue",cex=2)
abline(fit,lwd=2)
xVals<-seq(min(x),max(x),by=.01)
beto0
attach(faithful)
eruption.lm=lm(eruptions~waiting)
newdata=data.frame(waiting=80)
newdata
predict(eruption.lm,newdata,interval="predict")
?predict
?interval
?lm
newdata=data.frame(wt=3000)
mpg.lm=lm(mpg~wt)
mpg.lm=lm(mtcars$mpg~mtcars$wt)
predict(mpg.lm,newdata,interval="predict")
predict(mpg.lm,newdata,interval)
y<-mtcars$mpg
x<-mtcars$wt
mpg.lm=lm(y~x)
predict(mpg.lm,data.frame(x=3000),interval="confidence")
predict(mpg.lm,data.frame(x=3),interval="confidence")
predict(mpg.lm,data.frame(x=3),interval="predict")
predict(mpg.lm,data.frame(x=2),interval="predict")
predict(mpg.lm,data.frame(x=2),interval="confidence")
predict(mpg.lm,data.frame(x=2),interval="confidence")$upr-predict(mpg.lm,data.frame(x=2),interval="confidence")$fit
predict(mpg.lm,data.frame(x=2),interval="confidence")[2]-predict(mpg.lm,data.frame(x=2),interval="confidence")[3]
mpg.coef<-mpg.lm$coefficients
mpg.coef
print(coef)
mpg.coef<-summary(mpg.lm)$coefficients
mpg.coef
mpg.coef[2,1]+c(-1,1)*mpg.coef[2,2]*qt(0.975,length(x)-2)
lm(y~x)
summary(lm(y~x))
?lm
summary(lm(y~x-1))
predict(mpg.lm,data.frame(x=2),interval="predict")
predict(mpg.lm,data.frame(mean(x)),interval="predict")
predict(mpg.lm,data.frame(x=mean(x)),interval="predict")
predict(mpg.lm,data.frame(x=3),interval="predict")
mean(x)
predict(mpg.lm,data.frame(3.21725),interval="predict")
predict(mpg.lm,data.frame(x=3.21725),interval="predict")
mpg.lm
summary(mpg.lm)
coef()
coef
mpg.coef
mpg.coef[1,1]+c(-1,1)*mpg.coef[2,1]*qt(0.975,length(x)-2)
mpg.coef[1,1]+c(-1,1)*mpg.coef[2,1]*ave(x)
mpg.coef[2,1]
mpg.coef[2,1]*ave(x)
mpg.coef[2,1]*mean(x)
mpg.coef[2,1]*mean(x)+mpg.coef[1,1]
predict(mpg.lm,data.frame(x=3.21725),interval="confidence")
predict(mpg.lm,data.frame(x=mean(x)),interval="confidence")
dataset(mtcars)
require(dataset)
?mtcars
require(datasets)
datasets(mtcars)
dataset(mtcars)
data(mtcars)
require(graphics)
lm(mtcars$mpg ~ mtcars$cyl)
lm(mtcars$mpg ~ mtcars$cyl + mtcars$wt)
install.packages("swirl")
install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
fit=lm(Fertility~Agriculture, data=swiss)
g1=g
g1=g1+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
require(ggplot2)
g1=g1+geom_abline(intercept=coef(fit)[1],slope=coef(fit)[2],size=2)
g1
plot(fit)
summary(fit)$coef
fit2=lm(mtcars$mpg~mtcars$cyl+mtcars$wt)
plot(fit2)
summary(fit2)$coef
fit2=lm(mtcars$mpg~mtcars$cyl*mtcars$wt)
summary(fit2)$coef
summary(fit2)
dataset(mtcars)
datasets(mtcars)
require(datasets)
dataset(mtcars)
datasets(mtcars)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit
fit <- lm(mpg ~ factor(cyl), data = mtcars)
lm(mpg ~ factor(cyl), data = mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ factor(cyl), data = mtcars)
lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
?mtcars
lm(mpg ~ I(wt), data = mtcars)
library(car)
install.packages(car)
install.packages("car")
install.packages("car")
install.packages("quantreg")
install.packages("quantreg")
install.packages("car")
lm(mpg ~ factor(cyl) + wt, data = mtcars)
lm(mpg ~ factor(cyl) * wt, data = mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
anova(fit1,fit2)
?interaction
fit2 <- lm(mpg ~ factor(cyl) + wt + interaction(factor(cyl),wt), data = mtcars)
anova(fit1,fit2)
anova(fit1,fit2)$Pr
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
max(hatvalues(lm(y~x)))
min(hatvalues(lm(y~x)))
?dfbetas
fit<-lm(y~x)
hatvalues(fit)
dfbetas(fit)
dfbetas(fit)[,2]
hatvalues(fit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
labels(training)
labels(training[grepl("^IL"),labels(training)])
labels(training[grepl("^IL",labels(training)])
labels(training[grepl("^IL",labels(training))])
training[grepl("^IL",labels(training))]
training[grep("^IL",labels(training))]
training[grep("^IL.*",labels(training))]
training[grep("IL",labels(training))]
dim(training[grep("IL",labels(training))])
labels(training[grep("IL",labels(training))])
labels(training[grep("IL",labels(training)),])
labels(training[grep("$IL",labels(training)),])
labels(training[grep("^IL",labels(training)),])
name(training[grep("^IL",names(training)),])
names(training[grep("^IL",names(training)),])
names(training[grep("^IL",names(training))])
trainingIL<-(training[grep("^IL",names(training))])
preProcIL<-preProcess(trainingIL,method="pca",thresh=0.8)
preProcIL
preprocIL<-cbind(training$diagnosis,preprocIL)
preProcIL<-cbind(training$diagnosis,preProcIL)
preProcIL<-preProcess(trainingIL,method="pca",thresh=0.8)
dim(preProcIL)
preProcIL
trainingILpca<-preProcIL
lmset1<-cbind(training$diagnosis,trainingIL)
dim(lmset1)
lm1
rm(diagnosis)
lm1<-lm(diagnosis ~ .,data=lmset1)
lm1<-lm(training$diagnosis ~ .,data=lmset1)
modFit1<-train(training$diagnosis~.,data=lmset1,method="glm")
lmset1
modFit1<-train(training$diagnosis~.,data=lmset1,method="glm")
warnings()
modFit1<-train(training$diagnosis ~ . ,data=lmset1,method="glm")
modFit1<-train(training$diagnosis ~ . ,data=lmset1,method="lm")
modFit1<-train(training$diagnosis ~ . ,data=lmset1,method="glm")
rm(fit)
rm(fit1)
rm(fit2)
rm(fit3)
rm(g)
rm(g1)
rm(i)
rm(eruption.lm)
rm(e)
rm(mpg.lm)
rm(x)
rm(xVals)
rm(y)
rm(n)
rm(yhat)
rm(diamond)
rm(mtcars)
rm(p1)
rm(p2)
rm(mpg.coef)
rm(adData)
rm(newx)
diagnosis<-training.diagnosis
diagnosis<-training$diagnosis
lmset1<-cbind(diagnosis,trainingIL)
modFit1<-train(training$diagnosis ~ . ,data=lmset1,method="glm")
modFit1
predict(modFit1$finalModel,testing)
testing
predict(modFit1$finalModel,newdata=testing)
sqrt(sum((predict(modFit1$finalModel,newdata=testing)-testing$diagnosis)^2))
sqrt(sum((predict(modFit1$finalModel,newdata=testing)-as.numeric(testing$diagnosis))^2))
modFit1
summary(modFit1$finalModel)
predictions1<-predict(modFit1$finalModel,newdata=testing)
confusionMatrix(predictions1)
confusionMatrix(predictions1,diagnosis)
confusionMatrix(predictions1,training$diagnosis)
confusionMatrix(predictions1,testing$diagnosis)
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
dim(predictors_IL)
dim(ILtraining)
dim(trainingIL)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
dim(testing)
IL_str <- grep("^IL", colnames(training), value = TRUE)
IL_str
predictors_IL <- predictors[, IL_str]
dim(diagnosis)
df <- data.frame(diagnosis, predictors_IL)
dim(df)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
dim(training)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
C1
C2
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",
data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
C2 <- confusionMatrix(testing$diagnosis, predict(modelFit, testing))
print(C2)
source("~/PCA.R")
C1
C2
C1$Accuracy
C1$accuracy
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain=createDataPartition(segmentationOriginal$Case,p=3/4)[[1]]
training=df[inTrain,]
testing=sf[-inTrain,]
testing=df[-inTrain,]
inTrain<-createDataPartition(segmentationOriginal$Case,p=3/4)[[1]]
testing<-df[-inTrain,]
rm(testing)
rm(training)
rm(trainingIL)
testing<-df[-inTrain,]
rm(inTrain)
rm(lm1)
rm(IL_str)
rm(predictions)
rm(predictions1)
rm(C1)
rm(C2)
rm(testing)
inTrain<-createDataPartition(segmentationOriginal$Case,p=3/4)[[1]]
dim(segmentationOriginal)
training<-df[inTrain, ]
rm(df)
training<-segmentationOriginal[inTrain, ]
testing<-segmentationOriginal[-inTrain, ]
set.seed
set.seed(125)
source("q1.R")
getwd()
setwd("Documents/Coursera/Practical Machine Learning/Week 3")
source("q1.R")
rm(newdata)
rm(predictors)
rm(predictors_IL)
rm(diagnosis
rm(lmset1)
rm(sumCoef)
rm(diagnosis)
rm(modelFit)
rm(modFit1)
rm(preProcIL)
rm(trainingILpca)
rm(adData)
rm(lmset1)
source("q1.R")
View(segmentationOriginal)
source("q1.R")
View(testing)
View(training)
View(training)
source("q1.R")
source("q1.R")
source("q1.R")
library(rattle)
download.packages(rattle)
install.packages("rattle")
library(rattle)
